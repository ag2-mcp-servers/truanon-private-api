# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T10:46:19+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity

app = MCPProxy(
    contact={},
    description='Welcome to TruAnon!\nThank you for helping make the Internet a safer place to be.\n\nAdopting TruAnon is simple. There is no setup or dependencies, nothing to store or process. Making identity part of your service is fun, and youâ€™ll be up and running in a matter of minutes.\n\nTruAnon Private Token is used anytime you request information from TruAnon and you must edit this into the Variables section for this collection.\n\nThis API contains two endpoints and both require these same two arguments, also found in the Variables section of this collection.\n\nThese two arguments are:\n\nTruAnon Service Identifier\n\nand\n\nYour Member Name\n\nYour TruAnon Service Identifier was provided by TruAnon and is likely the root domain of your site or service. Your Member Name is the unique member ID on your system that you would like to query.\n\nInformation is continuously updated for display purposes and aside from performance considerations, there should be no need to capture or save anything from TruAnon.',
    title='TruAnon Private API',
    version='1.0.0',
    servers=[{'url': 'https://staging.truanon.com'}],
)


@app.get(
    '/api/get_profile',
    description=""" get_profile Private API: Request confirmed profile data for your unique member ID """,
    tags=['user_profile_management'],
)
def get_profile(id: Optional[str] = None, service: Optional[str] = None):
    """
    Get Profile
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/request_token',
    description=""" request_token Private API: Request a Proof token to let the member confirm in a popup interface

        {"id":"qjgblv72bzzio","type":"Proof","active":true,"name":"New Proof"}

Step 2. Create a verifyProfile Public Web link: Use the Proof token id as the token argument in your public URL used to open a new target popup. This activity is where members may confirm immediately.
    
        https://staging.truanon.com/verifyProfile?id=john_doe&service=securecannabisalliance&token=qjgblv72bzzio """,
    tags=['user_authentication_tokens'],
)
def get_token(id: Optional[str] = None, service: Optional[str] = None):
    """
    Get Token
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
